version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@9.0.2
  aws-cli: circleci/aws-cli@4.1
  ecr-scan-orb: tusker-direct/ecr-scan-orb@1.0

parameters:
  service-name:
    type: string
    default: "circleci-test"
  image-repo-name:
    type: string
    default: "tusker-direct/circleci-test"
  image-name:
    type: string
    default: "${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/tusker-direct/redis_test"
  image-tag:
    type: string
    default: "${CIRCLE_SHA1}"
  oidc-role-arn:
    type: string
    default: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCI_Role"

executors:
  perl_test_env:
    docker:
      - image: perl:5.32

commands:
  aws_auth:
    parameters:
      role_arn:
        type: string
        default: << pipeline.parameters.oidc-role-arn >>
    steps:
      - aws-cli/setup:
          profile_name: CircleCI
          role_arn: << parameters.role_arn >>

jobs:
  build:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup:
                profile_name: CircleCI
                role_arn: << pipeline.parameters.oidc-role-arn >>
          profile_name: CircleCI
          create_repo: true
          path: .
          platform: linux/amd64
          push_image: true
          repo: tusker-direct/<< pipeline.parameters.service-name >>
          tag: "${CIRCLE_SHA1}"
          extra_build_args: --provenance false
          setup_remote_docker: true
          remote_docker_layer_caching: true

  perl_tidy_check:
    executor: perl_test_env
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install Cpanm
          command: curl -L http://cpanmin.us | perl - App::cpanminus
      - run:
          name: Install Perl::Tidy
          command: cpanm Perl::Tidy --notest
      - run:
          name: Run perltidy check
          command: |
            FILES=$(find $(pwd)/my_app -type f \( -name "*.pl" -o -name "*.pm" -o -name "*.t" \) -mtime -14)
            if [ -z "$FILES" ]; then
              echo "No Perl files found to check!"
              exit 1
            fi
            echo ""
            echo "Checking Perl files formatting..."
            echo "--------------------------------"
            JOINED_FILES=$(printf "%s " "${FILES[@]}")
            echo "${JOINED_FILES}"
            perltidy -pro=.perltidyrc --assert-tidy ${JOINED_FILES}

  perlcritic:
    executor: perl_test_env
    steps:
      - checkout
      - run:
          name: Install Cpanm
          command: curl -L http://cpanmin.us | perl - App::cpanminus
      - run:
          name: Install Perl::Critic
          command: cpanm Perl::Critic --notest
      - run:
          name: Run perlcritic check
          command: |
            FILES=$(find $(pwd)/my_app -type f \( -name "*.pl" -o -name "*.pm" -o -name "*.t" \) -mtime -14)
            if [ -z "$FILES" ]; then
              echo "No Perl files found to check!"
              exit 1
            fi
            echo "Running Perl::Critic analysis..."
            echo "--------------------------------"
            JOINED_FILES=$(printf "%s " "${FILES[@]}")
            echo "${JOINED_FILES}"
            perlcritic --profile-strictness fatal ${JOINED_FILES}

  image_scan:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - aws_auth
      - ecr-scan-orb/scan:
          profile_name: CircleCI
          repository_name: << pipeline.parameters.image-repo-name >>
          image_id: "imageTag=<< pipeline.parameters.image-tag >>"
          security_policy: CRITICAL

  test:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - setup_remote_docker
      - aws_auth
      - run:
          name: Build and run tests
          command: |
            echo "PWD: $(pwd)"
            echo "#########"
            file .env
            echo "#########"
            echo "ls:"
            ls -la
            docker compose build
            docker compose up -d
            docker compose exec -T web bash -c "carton exec -- prove -v t"

workflows:
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
      - perl_tidy_check:
          requires:
            - build
      - perlcritic:
          requires:
            - perl_tidy_check

  build_test_and_push:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
      - image_scan:
          requires:
            - build
      - test:
          requires:
            - build
